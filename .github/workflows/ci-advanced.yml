name: CI Advanced

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Release

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    
    strategy:
      matrix:
        configuration: [Debug, Release]
        include:
          - configuration: Debug
            build_type: Debug
          - configuration: Release
            build_type: Release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: Build/
        key: ${{ runner.os }}-${{ matrix.configuration }}-${{ hashFiles('**/premake5.lua', '**/*.cpp', '**/*.h') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.configuration }}-
          ${{ runner.os }}-
      
    - name: Generate Visual Studio solution
      run: |
        Vendor\Premake\premake5.exe vs2022
        
    - name: Build project
      run: |
        msbuild LimitlessRemaster.sln /p:Configuration=${{ matrix.configuration }} /p:Platform=x64 /m /verbosity:minimal
        
    - name: Run tests
      run: |
        .\Build\${{ matrix.configuration }}-windows-x64\Test\Test.exe --success --no-run
        .\Build\${{ matrix.configuration }}-windows-x64\Test\Test.exe --success
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: windows-${{ matrix.configuration }}
        path: Build/${{ matrix.configuration }}-windows-x64/

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: Build/
        key: ${{ runner.os }}-${{ matrix.configuration }}-${{ hashFiles('**/premake5.lua', '**/*.cpp', '**/*.h') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.configuration }}-
          ${{ runner.os }}-
      
    - name: Generate Makefiles
      run: |
        Vendor/Premake/premake5 gmake2
        
    - name: Build project
      run: |
        make -j$(sysctl -n hw.ncpu) config=${{ matrix.configuration }}_x64
        
    - name: Run tests
      run: |
        ./Build/${{ matrix.configuration }}_x64/Test/Test --success --no-run
        ./Build/${{ matrix.configuration }}_x64/Test/Test --success
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: macos-${{ matrix.configuration }}
        path: Build/${{ matrix.configuration }}_x64/

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: Build/
        key: ${{ runner.os }}-${{ matrix.configuration }}-${{ hashFiles('**/premake5.lua', '**/*.cpp', '**/*.h') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.configuration }}-
          ${{ runner.os }}-
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: Generate Makefiles
      run: |
        Vendor/Premake/premake5 gmake2
        
    - name: Build project
      run: |
        make -j$(nproc) config=${{ matrix.configuration }}_x64
        
    - name: Run tests
      run: |
        ./Build/${{ matrix.configuration }}_x64/Test/Test --success --no-run
        ./Build/${{ matrix.configuration }}_x64/Test/Test --success
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: linux-${{ matrix.configuration }}
        path: Build/${{ matrix.configuration }}_x64/

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format clang-tidy
        
    - name: Check code formatting
      run: |
        find . -name "*.cpp" -o -name "*.h" | grep -v Vendor | xargs clang-format --dry-run --Werror
        
    - name: Run clang-tidy
      run: |
        Vendor/Premake/premake5 gmake2
        make -j$(nproc) config=Debug_x64
        find . -name "*.cpp" -o -name "*.h" | grep -v Vendor | xargs clang-tidy -p Build/Intermediates/Debug_x64 --quiet
        
    - name: Check for TODO comments
      run: |
        echo "Checking for TODO comments..."
        if grep -r "TODO" --include="*.cpp" --include="*.h" . | grep -v Vendor; then
          echo "Found TODO comments. Please address them before merging."
          exit 1
        fi
        
    - name: Check for FIXME comments
      run: |
        echo "Checking for FIXME comments..."
        if grep -r "FIXME" --include="*.cpp" --include="*.h" . | grep -v Vendor; then
          echo "Found FIXME comments. Please address them before merging."
          exit 1
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: Build with AddressSanitizer
      run: |
        Vendor/Premake/premake5 gmake2
        make -j$(nproc) config=Debug_x64 CXXFLAGS="-fsanitize=address -fno-omit-frame-pointer"
        
    - name: Run tests with AddressSanitizer
      run: |
        ASAN_OPTIONS=detect_leaks=1 ./Build/Debug_x64/Test/Test --success

  build-matrix:
    name: Build Matrix
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        configuration: [Debug, Release]
        exclude:
          - os: windows-latest
            configuration: Debug  # Skip Debug on Windows to reduce CI time
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup build environment
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: Generate project files (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Vendor\Premake\premake5.exe vs2022
        
    - name: Generate project files (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        Vendor/Premake/premake5 gmake2
          
    - name: Build project (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        msbuild LimitlessRemaster.sln /p:Configuration=${{ matrix.configuration }} /p:Platform=x64 /m
        
    - name: Build project (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        make -j$(nproc) config=${{ matrix.configuration }}_x64
          
    - name: Run tests (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\Build\${{ matrix.configuration }}-windows-x64\Test\Test.exe --success
        
    - name: Run tests (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        ./Build/${{ matrix.configuration }}_x64/Test/Test --success 