name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate Visual Studio solution
      run: |
        Vendor\Premake\premake5.exe vs2022
        
    - name: Build project
      run: |
        msbuild LimitlessRemaster.sln /p:Configuration=${{ matrix.configuration }} /p:Platform=x64 /m
        
    - name: Run tests
      run: |
        .\Build\${{ matrix.configuration }}-windows-x64\Test\Test.exe --success

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate Makefiles
      run: |
        Vendor/Premake/premake5 gmake2
        
    - name: Build project
      run: |
        make -j$(nproc) config=${{ matrix.configuration }}_x64
        
    - name: Run tests
      run: |
        ./Build/${{ matrix.configuration }}_x64/Test/Test --success

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: Generate Makefiles
      run: |
        Vendor/Premake/premake5 gmake2
        
    - name: Build project
      run: |
        make -j$(nproc) config=${{ matrix.configuration }}_x64
        
    - name: Run tests
      run: |
        ./Build/${{ matrix.configuration }}_x64/Test/Test --success

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format clang-tidy
        
    - name: Check code formatting
      run: |
        find . -name "*.cpp" -o -name "*.h" | grep -v Vendor | xargs clang-format --dry-run --Werror
        
    - name: Run clang-tidy
      run: |
        Vendor/Premake/premake5 gmake2
        make -j$(nproc) config=Debug_x64
        find . -name "*.cpp" -o -name "*.h" | grep -v Vendor | xargs clang-tidy -p Build/Intermediates/Debug_x64 