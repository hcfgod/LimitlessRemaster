name: Test Linux Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-linux:
    name: Test Linux Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential g++ make cmake pkg-config
        sudo apt-get install -y libasound2-dev libpulse-dev libaudio-dev libjack-dev
        sudo apt-get install -y libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxi-dev libxinerama-dev libxxf86vm-dev libxss-dev
        sudo apt-get install -y libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev
        sudo apt-get install -y libdbus-1-dev libudev-dev libibus-1.0-dev
        sudo apt-get install -y libdrm-dev libgbm-dev
        sudo apt-get install -y libwayland-dev libxkbcommon-dev
        
    - name: Build SDL3 from source
      run: |
        echo "Building SDL3 from source..."
        cd /tmp
        git clone https://github.com/libsdl-org/SDL.git
        cd SDL
        git checkout release-3.2.18
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DSDL_STATIC=ON -DSDL_SHARED=OFF -DSDL_TEST=OFF
        make -j$(nproc)
        sudo make install
        sudo ldconfig
        
        echo "SDL3 installation info:"
        pkg-config --modversion sdl3 || echo "SDL3 not found by pkg-config"
        ls -la /usr/local/lib/libSDL3*
        ls -la /usr/local/include/SDL3/
        
    - name: Download premake5
      run: |
        echo "Downloading premake5..."
        # Try the latest stable release first
        curl -L -o premake5.tar.gz https://github.com/premake/premake-core/releases/download/v5.0.0-alpha16/premake-5.0.0-alpha16-linux.tar.gz
        tar -xzf premake5.tar.gz
        chmod +x premake5
        echo "Premake5 binary info:"
        ls -la premake5
        file premake5
        echo "Testing premake5 execution:"
        ./premake5 --version
        
        echo "Testing if premake5 can parse the workspace..."
        ./premake5 --file=premake5.lua --version
        echo "Testing gmake2 action..."
        ./premake5 --file=premake5.lua gmake2 --verbose
        echo "Premake5 gmake2 exit code: $?"
        
        if [ $? -ne 0 ]; then
          echo "Stable version failed, trying beta release..."
          curl -L -o premake5-beta.tar.gz https://github.com/premake/premake-core/releases/download/v5.0.0-beta2/premake-5.0.0-beta2-linux.tar.gz
          tar -xzf premake5-beta.tar.gz
          chmod +x premake5
          echo "New premake5 version:"
          ./premake5 --version
          echo "Testing new version with gmake2..."
          ./premake5 --file=premake5.lua gmake2 --verbose
        fi
        
    - name: Generate Makefiles
      run: |
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Checking if premake5.lua exists:"
        if [ -f "premake5.lua" ]; then
          echo "premake5.lua found"
          echo "premake5.lua contents:"
          cat premake5.lua
          echo "Checking sub-project premake5.lua files:"
          for file in */premake5.lua; do
            if [ -f "$file" ]; then
              echo "Found: $file"
            else
              echo "Missing: $file"
            fi
          done
        else
          echo "premake5.lua not found!"
          exit 1
        fi
        echo "Generating Makefiles..."
        echo "Premake5 workspace info:"
        ./premake5 --version
        echo "Testing premake5 with a simple action:"
        ./premake5 clean || echo "Clean action failed (this is normal if no build files exist)"
        echo "Generating Makefiles..."
        
        # Try to execute gmake2 action directly
        echo "Command: ./premake5 --file=premake5.lua gmake2"
        ./premake5 --file=premake5.lua gmake2
        echo "Premake5 exit code: $?"
        
        # If gmake2 fails, try gmake
        if [ $? -ne 0 ]; then
          echo "gmake2 failed, trying gmake..."
          ./premake5 --file=premake5.lua gmake
          echo "Premake5 gmake exit code: $?"
        fi
        
        # Try generating with explicit configuration (only if supported)
        echo "Checking if --config option is supported:"
        ./premake5 --help | grep -i "config" || echo "No config option found in help"
        
        # Try generating with explicit configuration
        echo "Trying to generate with explicit Debug configuration:"
        ./premake5 --file=premake5.lua gmake2 --config=Debug 2>&1 || echo "Config option not supported"
        echo "Premake5 with config exit code: $?"
        
        # If that doesn't work, try generating all configurations
        echo "Trying to generate all configurations:"
        ./premake5 --file=premake5.lua gmake2 --configs=Debug,Release,Dist 2>&1 || echo "Configs option not supported"
        echo "Premake5 with configs exit code: $?"
        
        # Check what actions are available
        echo "Available premake5 actions:"
        ./premake5 --help | grep -A 30 "ACTIONS" || echo "Could not get actions list"
        
        # Try to list configurations explicitly
        echo "Trying to list configurations:"
        ./premake5 --file=premake5.lua --list-configs 2>&1 || echo "list-configs not available"
        ./premake5 --file=premake5.lua --list-platforms 2>&1 || echo "list-platforms not available"
        
        # Check if Makefile was generated
        if [ -f "Makefile" ]; then
          echo "Makefile was generated successfully!"
          echo "Makefile size: $(wc -l < Makefile) lines"
        else
          echo "Makefile was not generated, trying alternative approaches..."
          
          # Try without verbose flag
          echo "Command: ./premake5 --file=premake5.lua --verbose gmake2"
          ./premake5 --file=premake5.lua --verbose gmake2
          echo "Premake5 exit code: $?"
          
          if [ ! -f "Makefile" ]; then
            echo "Trying gmake action (older version):"
            echo "Command: ./premake5 --file=premake5.lua gmake"
            ./premake5 --file=premake5.lua gmake
            echo "Premake5 exit code: $?"
            
            if [ ! -f "Makefile" ]; then
              echo "All premake5 actions failed to generate Makefile"
              echo "Trying to list available actions:"
              ./premake5 --help | grep -A 20 "ACTIONS"
              exit 1
            fi
          fi
        fi
        echo "Generated files:"
        ls -la
        echo "Makefile targets (first 100 lines):"
        head -100 Makefile | grep -E "^[a-zA-Z]" || echo "No targets found in first 100 lines"
        echo "Available configurations:"
        grep -E "^[a-zA-Z][a-zA-Z0-9_-]*:" Makefile | head -20 || echo "No configurations found"
        echo "Looking for specific configuration patterns:"
        grep -i "debug" Makefile | head -10 || echo "No debug configurations found"
        grep -i "release" Makefile | head -10 || echo "No release configurations found"
        echo "All make targets (configurations):"
        make -qp | grep -E "^[a-zA-Z][a-zA-Z0-9_-]*:" | grep -v "^Makefile:" | head -30 || echo "No targets found"
        echo "Testing specific configuration targets:"
        make -n config=debug_x64 2>&1 | head -10 || echo "Debug target not found"
        make -n config=release_x64 2>&1 | head -10 || echo "Release target not found"
        make -n config=dist_x64 2>&1 | head -10 || echo "Dist target not found"
        echo "Looking for configuration variables in Makefile:"
        grep -i "config.*=" Makefile | head -10 || echo "No config variables found"
        echo "Looking for CONFIG variable usage:"
        grep -i "CONFIG" Makefile | head -10 || echo "No CONFIG usage found"
        echo "Looking for any configuration-related content:"
        grep -i "debug\|release\|dist" Makefile | head -10 || echo "No configuration keywords found"
        echo "Checking Makefile structure around line 42 (where error occurs):"
        sed -n '35,50p' Makefile || echo "Could not read around line 42"
        echo "Full Makefile content for debugging:"
        cat Makefile
        
    - name: Build project
      run: |
        echo "Building with verbose output..."
        echo "Available configurations from premake5.lua: Debug, Release, Dist"
        echo "Available platforms from premake5.lua: x64, ARM64"
        echo "Generated Makefile configurations: debug_x64, debug_arm64, release_x64, release_arm64, dist_x64, dist_arm64"
        echo "Checking available make targets:"
        make -qp | grep -E "^[a-zA-Z][a-zA-Z0-9_-]*:" | grep -v "^Makefile:" | head -20
        echo "=== AVAILABLE CONFIGURATIONS ==="
        echo "All make targets (configurations):"
        make -qp | grep -E "^[a-zA-Z][a-zA-Z0-9_-]*:" | grep -v "^Makefile:" | sort
        echo "=== END AVAILABLE CONFIGURATIONS ==="
        echo "=== MAKEFILE ANALYSIS ==="
        echo "Looking for configuration-specific targets:"
        grep -E "^[a-zA-Z][a-zA-Z0-9_-]*:" Makefile | grep -i "debug\|release\|dist" || echo "No configuration targets found"
        echo "Looking for project targets:"
        grep -E "^[a-zA-Z][a-zA-Z0-9_-]*:" Makefile | grep -v "Makefile" | head -20
        echo "=== END MAKEFILE ANALYSIS ==="
        echo "Trying Debug configuration..."
        make -j$(nproc) config=debug_x64 VERBOSE=1
        
        echo "Build exit code: $?"
        if [ $? -ne 0 ]; then
          echo "Build failed with exit code $?"
          echo "Trying Release configuration..."
          make -j$(nproc) config=release_x64 VERBOSE=1
          if [ $? -ne 0 ]; then
            echo "Release build failed, trying Dist configuration..."
            make -j$(nproc) config=dist_x64 VERBOSE=1
            if [ $? -ne 0 ]; then
              echo "All configuration builds failed, trying to build projects directly..."
              make -j$(nproc) Limitless VERBOSE=1
              if [ $? -ne 0 ]; then
                echo "Limitless build failed, trying Sandbox..."
                make -j$(nproc) Sandbox VERBOSE=1
                if [ $? -ne 0 ]; then
                  echo "Sandbox build failed, trying Test..."
                  make -j$(nproc) Test VERBOSE=1
                  if [ $? -ne 0 ]; then
                    echo "All build attempts failed"
                    exit 1
                  fi
                fi
              fi
            fi
          fi
        fi
        
    - name: List build output
      run: |
        echo "Build directory contents:"
        ls -la Build/ || echo "Build directory not found"
        echo "Looking for debug directories:"
        find Build/ -name "*debug*" -type d 2>/dev/null || echo "No debug directories found"
        echo "Looking for Debug directories:"
        find Build/ -name "*Debug*" -type d 2>/dev/null || echo "No Debug directories found"
        echo "Searching for all executables:"
        find Build/ -name "Test" -o -name "Sandbox" -o -name "*.exe" 2>/dev/null || echo "No executables found"
        
    - name: Run tests
      run: |
        # Try to find the test executable
        TEST_EXE=$(find Build/ -name "Test" -type f 2>/dev/null | head -1)
        if [ -n "$TEST_EXE" ]; then
          echo "Found test executable: $TEST_EXE"
          "$TEST_EXE" --success
        else
          echo "Test executable not found"
          find Build/ -name "*Test*" -type f 2>/dev/null || echo "No test files found"
        fi 